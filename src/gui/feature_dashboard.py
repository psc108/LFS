from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *

class FeatureDashboard(QWidget):
    """Prominent dashboard showing all available features"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_dashboard()
    
    def setup_dashboard(self):
        layout = QVBoxLayout(self)
        
        # Header
        header = QLabel("üöÄ LFS Enterprise Features")
        header.setStyleSheet("font-size: 24px; font-weight: bold; color: #2c3e50; padding: 20px;")
        header.setAlignment(Qt.AlignCenter)
        layout.addWidget(header)
        
        # Feature grid
        scroll_area = QScrollArea()
        scroll_widget = QWidget()
        grid_layout = QGridLayout(scroll_widget)
        
        # Define feature cards
        features = [
            # Row 1 - Core Build Features
            ("üßô‚ôÇÔ∏è Build Wizard", "Guided setup for all build types", "primary", self.open_wizard),
            ("‚ö° Parallel Builds", "Multi-core build orchestration", "success", self.open_parallel),
            ("üìã Templates", "Pre-configured build templates", "info", self.open_templates),
            ("üê≥ Containers", "Docker/Podman integration", "warning", self.open_containers),
            
            # Row 2 - Analysis & Monitoring
            ("üîç Fault Analysis", "AI-powered failure detection", "danger", self.open_fault_analysis),
            ("üìä Performance", "Build metrics & analytics", "primary", self.open_performance),
            ("üõ°Ô∏è Security Scan", "Vulnerability assessment", "danger", self.open_security),
            ("üè• System Health", "Real-time monitoring", "success", self.open_health),
            
            # Row 3 - Deployment & Distribution
            ("üì¶ ISO Generator", "Bootable image creation", "info", self.open_iso),
            ("üñ•Ô∏è VM Images", "Virtual machine deployment", "info", self.open_vm),
            ("üåê Network Boot", "PXE boot configuration", "warning", self.open_netboot),
            ("‚òÅÔ∏è Cloud Deploy", "AWS/Azure/GCP integration", "primary", self.open_cloud),
            
            # Row 4 - Collaboration & Integration
            ("üë• Team Features", "Multi-user collaboration", "success", self.open_team),
            ("üåê REST API", "External integrations", "info", self.open_api),
            ("üîå Plugins", "Extensible architecture", "warning", self.open_plugins),
            ("üìÖ Scheduler", "Automated build scheduling", "primary", self.open_scheduler)
        ]
        
        # Create feature cards in grid
        for i, (title, description, color, action) in enumerate(features):
            card = self.create_feature_card(title, description, color, action)
            row = i // 4
            col = i % 4
            grid_layout.addWidget(card, row, col)
        
        scroll_area.setWidget(scroll_widget)
        scroll_area.setWidgetResizable(True)
        layout.addWidget(scroll_area)
        
        # Quick stats bar
        stats_bar = self.create_stats_bar()
        layout.addWidget(stats_bar)
    
    def create_feature_card(self, title, description, color, action):
        """Create a prominent feature card"""
        card = QFrame()
        card.setFrameStyle(QFrame.Box)
        card.setLineWidth(2)
        
        # Color scheme
        colors = {
            "primary": "#3498db",
            "success": "#27ae60", 
            "info": "#17a2b8",
            "warning": "#f39c12",
            "danger": "#e74c3c"
        }
        
        card.setStyleSheet(f"""
            QFrame {{
                border: 2px solid {colors.get(color, '#3498db')};
                border-radius: 10px;
                background-color: white;
                margin: 5px;
            }}
            QFrame:hover {{
                background-color: #f8f9fa;
                border-width: 3px;
            }}
        """)
        
        layout = QVBoxLayout(card)
        
        # Title
        title_label = QLabel(title)
        title_label.setStyleSheet(f"font-size: 16px; font-weight: bold; color: {colors.get(color, '#3498db')};")
        title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(title_label)
        
        # Description
        desc_label = QLabel(description)
        desc_label.setStyleSheet("font-size: 12px; color: #666; padding: 5px;")
        desc_label.setAlignment(Qt.AlignCenter)
        desc_label.setWordWrap(True)
        layout.addWidget(desc_label)
        
        # Action button
        btn = QPushButton("Open")
        btn.setStyleSheet(f"""
            QPushButton {{
                background-color: {colors.get(color, '#3498db')};
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 5px;
                font-weight: bold;
            }}
            QPushButton:hover {{
                background-color: {colors.get(color, '#3498db')}dd;
            }}
        """)
        btn.clicked.connect(action)
        layout.addWidget(btn)
        
        card.setMinimumSize(200, 150)
        card.setMaximumSize(250, 180)
        
        return card
    
    def create_stats_bar(self):
        """Create system statistics bar"""
        stats_widget = QFrame()
        stats_widget.setFrameStyle(QFrame.Box)
        stats_widget.setStyleSheet("""
            QFrame {
                background-color: #2c3e50;
                color: white;
                padding: 10px;
                border-radius: 5px;
            }
        """)
        
        layout = QHBoxLayout(stats_widget)
        
        # Stats items
        stats = [
            ("üî® Total Builds", "0"),
            ("‚ö° Active Builds", "0"),
            ("üõ°Ô∏è Risk Score", "Low"),
            ("üè• System Health", "Healthy"),
            ("üåê API Status", "Ready"),
            ("üë• Active Users", "1")
        ]
        
        for label, value in stats:
            stat_layout = QVBoxLayout()
            
            label_widget = QLabel(label)
            label_widget.setStyleSheet("font-size: 12px; color: #bdc3c7;")
            label_widget.setAlignment(Qt.AlignCenter)
            
            value_widget = QLabel(value)
            value_widget.setStyleSheet("font-size: 16px; font-weight: bold; color: white;")
            value_widget.setAlignment(Qt.AlignCenter)
            
            stat_layout.addWidget(label_widget)
            stat_layout.addWidget(value_widget)
            
            layout.addLayout(stat_layout)
        
        return stats_widget
    
    # Feature action methods
    def open_wizard(self):
        from .wizard_dialog import BuildWizardDialog
        from ..templates.template_manager import BuildTemplateManager
        
        try:
            template_manager = BuildTemplateManager()
            dialog = BuildWizardDialog(template_manager, self)
            dialog.exec_()
        except Exception as e:
            QMessageBox.information(self, "Build Wizard", f"üßô‚ôÇÔ∏è Build Wizard\n\nGuided build configuration with:\n‚Ä¢ Template selection\n‚Ä¢ Kernel configuration\n‚Ä¢ Advanced options\n‚Ä¢ Real-time preview")
    
    def open_parallel(self):
        QMessageBox.information(self, "Parallel Builds", "‚ö° Parallel Build Engine\n\n‚Ä¢ Multi-core task distribution\n‚Ä¢ Intelligent dependency management\n‚Ä¢ Resource optimization\n‚Ä¢ Performance monitoring\n‚Ä¢ Distributed builds")
    
    def open_templates(self):
        QMessageBox.information(self, "Build Templates", "üìã Pre-configured Templates\n\n‚Ä¢ Minimal LFS\n‚Ä¢ Desktop Environment\n‚Ä¢ Server Configuration\n‚Ä¢ Embedded Systems\n‚Ä¢ Custom templates")
    
    def open_containers(self):
        QMessageBox.information(self, "Container Integration", "üê≥ Container Support\n\n‚Ä¢ Docker builds\n‚Ä¢ Podman integration\n‚Ä¢ Isolated environments\n‚Ä¢ Scalable deployment\n‚Ä¢ Container registries")
    
    def open_fault_analysis(self):
        QMessageBox.information(self, "Fault Analysis", "üîç AI-Powered Analysis\n\n‚Ä¢ Pattern recognition\n‚Ä¢ Predictive failure detection\n‚Ä¢ Auto-fix suggestions\n‚Ä¢ Root cause analysis\n‚Ä¢ ML-based insights")
    
    def open_performance(self):
        QMessageBox.information(self, "Performance Analytics", "üìä Build Performance\n\n‚Ä¢ Stage duration tracking\n‚Ä¢ Resource utilization\n‚Ä¢ Bottleneck identification\n‚Ä¢ Trend analysis\n‚Ä¢ Optimization recommendations")
    
    def open_security(self):
        QMessageBox.information(self, "Security Scanner", "üõ°Ô∏è Vulnerability Assessment\n\n‚Ä¢ CVE database scanning\n‚Ä¢ Compliance checking (CIS, NIST)\n‚Ä¢ Package vulnerability analysis\n‚Ä¢ Security recommendations\n‚Ä¢ Risk scoring")
    
    def open_health(self):
        QMessageBox.information(self, "System Health", "üè• Health Monitoring\n\n‚Ä¢ Real-time system metrics\n‚Ä¢ Component status tracking\n‚Ä¢ Predictive alerts\n‚Ä¢ Performance monitoring\n‚Ä¢ Health dashboards")
    
    def open_iso(self):
        QMessageBox.information(self, "ISO Generator", "üì¶ Bootable Images\n\n‚Ä¢ ISOLINUX/GRUB support\n‚Ä¢ Custom boot configurations\n‚Ä¢ Live CD creation\n‚Ä¢ Installation media\n‚Ä¢ Automated generation")
    
    def open_vm(self):
        QMessageBox.information(self, "VM Images", "üñ•Ô∏è Virtual Machine Deployment\n\n‚Ä¢ QCOW2, VMDK, VHD formats\n‚Ä¢ Hypervisor compatibility\n‚Ä¢ Cloud-ready images\n‚Ä¢ Automated provisioning\n‚Ä¢ Template management")
    
    def open_netboot(self):
        QMessageBox.information(self, "Network Boot", "üåê PXE Boot Setup\n\n‚Ä¢ Network installation\n‚Ä¢ Diskless workstations\n‚Ä¢ Enterprise deployment\n‚Ä¢ TFTP configuration\n‚Ä¢ Boot menu management")
    
    def open_cloud(self):
        QMessageBox.information(self, "Cloud Deployment", "‚òÅÔ∏è Cloud Integration\n\n‚Ä¢ AWS EC2/AMI support\n‚Ä¢ Azure VM images\n‚Ä¢ Google Cloud Platform\n‚Ä¢ Auto-scaling groups\n‚Ä¢ Infrastructure as Code")
    
    def open_team(self):
        QMessageBox.information(self, "Team Collaboration", "üë• Multi-User Features\n\n‚Ä¢ Role-based access control\n‚Ä¢ Team dashboards\n‚Ä¢ Build sharing\n‚Ä¢ Review workflows\n‚Ä¢ Activity tracking")
    
    def open_api(self):
        QMessageBox.information(self, "REST API", "üåê API Integration\n\n‚Ä¢ RESTful endpoints\n‚Ä¢ Webhook support\n‚Ä¢ Authentication\n‚Ä¢ External integrations\n‚Ä¢ Real-time updates")
    
    def open_plugins(self):
        QMessageBox.information(self, "Plugin System", "üîå Extensible Architecture\n\n‚Ä¢ Custom workflows\n‚Ä¢ Third-party integrations\n‚Ä¢ Event hooks\n‚Ä¢ Plugin marketplace\n‚Ä¢ Development SDK")
    
    def open_scheduler(self):
        QMessageBox.information(self, "Build Scheduler", "üìÖ Automated Scheduling\n\n‚Ä¢ Cron-like scheduling\n‚Ä¢ Recurring builds\n‚Ä¢ Dependency triggers\n‚Ä¢ Resource management\n‚Ä¢ Notification integration")